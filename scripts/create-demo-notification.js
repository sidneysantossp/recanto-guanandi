const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

async function createDemoNotification() {
  try {
    console.log('üîî Criando notifica√ß√£o demo...');
    
    // Verificar se h√° usu√°rios no banco
    const users = await prisma.user.findMany({
      take: 1
    });
    
    if (users.length === 0) {
      console.log('‚ùå Nenhum usu√°rio encontrado no banco de dados');
      return;
    }
    
    const autorId = users[0].id;
    console.log(`üë§ Usando usu√°rio: ${users[0].nome} (${users[0].email})`);
    
    // Criar a notifica√ß√£o demo
    const notification = await prisma.notification.create({
      data: {
        titulo: 'Notifica√ß√£o Demo - Sistema Funcionando! üéâ',
        conteudo: 'Esta √© uma notifica√ß√£o de demonstra√ß√£o criada para testar o sistema de notifica√ß√µes migrado para MySQL/Prisma. O sistema est√° funcionando corretamente!',
        tipo: 'comunicado',
        prioridade: 'alta',
        status: 'publicado',
        autor: autorId,
        dataPublicacao: new Date(),
        destinatarios: {
          create: {
            tipo: 'todos'
          }
        }
      },
      include: {
        destinatarios: true
      }
    });
    
    console.log('‚úÖ Notifica√ß√£o demo criada com sucesso!');
    console.log('üìã Detalhes:');
    console.log(`   ID: ${notification.id}`);
    console.log(`   T√≠tulo: ${notification.titulo}`);
    console.log(`   Tipo: ${notification.tipo}`);
    console.log(`   Prioridade: ${notification.prioridade}`);
    console.log(`   Status: ${notification.status}`);
    console.log(`   Data: ${notification.dataPublicacao}`);
    
    console.log('\nüåê Acesse http://localhost:3001/notificacoes para ver a notifica√ß√£o!');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar notifica√ß√£o demo:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createDemoNotification();